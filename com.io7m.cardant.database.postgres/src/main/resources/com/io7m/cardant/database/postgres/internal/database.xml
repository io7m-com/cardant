<?xml version="1.0" encoding="UTF-8" ?>

<Schemas xmlns="urn:com.io7m.trasco.database.statements:1:0">

  <Parameters>
    <Parameter name="search.language"
               type="STRING"/>
  </Parameters>

  <Schema versionCurrent="0">
    <Comment>
      The cardant role is a least-privilege role that can perform only those operations required to run the system and
      no others.
    </Comment>

    <Statement><![CDATA[
DROP ROLE IF EXISTS cardant;
]]></Statement>
    <Statement><![CDATA[
CREATE ROLE cardant WITH NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT NOLOGIN;
]]></Statement>

    <Comment>
      The cardant_none role is a no-privilege role that cannot perform any actions.
    </Comment>

    <Statement><![CDATA[
DROP ROLE IF EXISTS cardant_none;
]]></Statement>
    <Statement><![CDATA[
CREATE ROLE cardant_none WITH NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT NOLOGIN;
]]></Statement>

    <Comment>
      The cardant_read_only role is a read-only role that cannot write to anything.
    </Comment>

    <Statement><![CDATA[
DROP ROLE IF EXISTS cardant_read_only;
]]></Statement>
    <Statement><![CDATA[
CREATE ROLE cardant_read_only WITH NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT NOLOGIN;
]]></Statement>

    <Comment>
      The schema version table stores the current version of the database schema. Implementations are expected to query
      this table on connecting to the database in order to ensure that the calling code is compatible with the tables in
      the database.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE schema_version (
  version_lock            CHAR(1) NOT NULL DEFAULT 'X',
  version_application_id  TEXT    NOT NULL,
  version_number          BIGINT  NOT NULL,

  CONSTRAINT check_lock_primary
    PRIMARY KEY (version_lock),

  CONSTRAINT check_lock_locked
    CHECK (version_lock = 'X')
)
]]>
    </Statement>
  </Schema>

  <Schema versionCurrent="1">
    <Comment>
      Some tables use the hstore type to store unstructured key/value maps.
    </Comment>

    <Statement><![CDATA[
CREATE EXTENSION hstore;
]]></Statement>

    <Comment>
      The database makes extensive use of Lanark dotted names. It's necessary to tokenize those names in order to use
      them with full text searching. Essentially, anything that isn't a letter or a number is converted to a space. This
      translated string can then be given to the various full-text search functions for indexing.
    </Comment>

    <Statement><![CDATA[
-- [jooq ignore start]

CREATE FUNCTION tokenize_dotted_name(x text) RETURNS text
  LANGUAGE SQL
  IMMUTABLE
  RETURNS NULL ON NULL INPUT
    RETURN TRANSLATE (x, '-_.', '   ')

-- [jooq ignore stop]
]]></Statement>

    <Statement><![CDATA[
-- [jooq ignore start]

CREATE OR REPLACE FUNCTION text_array_to_text(TEXT[])
  RETURNS TEXT AS
$$
  SELECT array_to_string($1, ' ');
$$ LANGUAGE SQL IMMUTABLE;

-- [jooq ignore stop]
]]></Statement>

    <Comment>
      The users table stores the current set of users. The name field is neither authoritative, nor expected to be
      unique, because the external identity server is the authoritative source for names.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE users (
  id    UUID   NOT NULL PRIMARY KEY,
  name  TEXT   NOT NULL,
  roles TEXT[] NOT NULL
)
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE ON users TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON users TO cardant_read_only
    </Statement>

    <Comment>
      The files table contains files.
    </Comment>

    <StatementParameterized parameterInterpolation="STRING_FORMATTING">
      <ParameterReferences>
        <ParameterReference order="0"
                            name="search.language"/>
      </ParameterReferences>
      <Text>
        <![CDATA[
CREATE TABLE files (
  file_id          UUID         NOT NULL,
  file_description VARCHAR(256) NOT NULL,

  -- [jooq ignore start]
  file_description_search TSVECTOR NOT NULL
    GENERATED ALWAYS AS (to_tsvector(%S, file_description)) STORED,
  -- [jooq ignore stop]

  file_media_type     VARCHAR(128) NOT NULL,
  file_hash_algorithm VARCHAR(32)  NOT NULL,
  file_hash_value     VARCHAR(256) NOT NULL,
  file_data           BYTEA        NOT NULL,
  file_data_used      BIGINT       NOT NULL,

  CONSTRAINT files_primary_key
    PRIMARY KEY (file_id),

  CONSTRAINT files_data_used_nonnegative
    CHECK (file_data_used >= 0)
)
]]></Text>
    </StatementParameterized>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON files TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON files TO cardant_read_only
    </Statement>

    <Comment>
      The metadata_type_packages table contains the installed metadata type packages.
    </Comment>

    <StatementParameterized parameterInterpolation="STRING_FORMATTING">
      <ParameterReferences>
        <ParameterReference order="0"
                            name="search.language"/>
      </ParameterReferences>
      <Text>
        <![CDATA[
CREATE TABLE metadata_type_packages (
  mtp_id                 INTEGER           NOT NULL GENERATED ALWAYS AS IDENTITY,
  mtp_name               VARCHAR(1024)     NOT NULL,
  mtp_version_major      INTEGER           NOT NULL,
  mtp_version_minor      INTEGER           NOT NULL,
  mtp_version_patch      INTEGER           NOT NULL,
  mtp_version_qualifier  VARCHAR(1024),
  mtp_description        VARCHAR(1024)     NOT NULL,

  -- [jooq ignore start]
  mtp_description_search TSVECTOR NOT NULL
    GENERATED ALWAYS AS (to_tsvector(%1$S, mtp_description)) STORED,
  -- [jooq ignore stop]

  mtp_text VARCHAR(10000000) NOT NULL,

  CONSTRAINT metadata_type_packages_primary_key
    PRIMARY KEY (mtp_id),

  CONSTRAINT metadata_type_packages_name_unique
    UNIQUE (mtp_name)
)
]]></Text>
    </StatementParameterized>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON metadata_type_packages TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON metadata_type_packages TO cardant_read_only
    </Statement>

    <Statement><![CDATA[
CREATE TABLE metadata_types (
  mt_id       INTEGER       NOT NULL GENERATED ALWAYS AS IDENTITY,
  mt_package  INTEGER       NOT NULL,
  mt_name     VARCHAR(1024) NOT NULL,

  CONSTRAINT metadata_types_primary_key
    PRIMARY KEY (mt_id),

  CONSTRAINT metadata_types_unique
    UNIQUE (mt_package, mt_name),

  CONSTRAINT metadata_types_name_valid
    CHECK (
      (length (mt_name) <= 1024) AND (mt_name ~ '^[a-z][a-z0-9_-]*$')
    )
)
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON metadata_types TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON metadata_types TO cardant_read_only
    </Statement>

    <Comment>
      The metadata_scalar_base_type_t type represents the available base types for scalar values.
    </Comment>

    <Statement><![CDATA[
CREATE TYPE metadata_scalar_base_type_t AS ENUM(
  'SCALAR_INTEGRAL',
  'SCALAR_TEXT',
  'SCALAR_MONEY',
  'SCALAR_TIME',
  'SCALAR_REAL'
);
]]></Statement>

    <Comment>
      The items table contains the list of items.
    </Comment>

    <StatementParameterized parameterInterpolation="STRING_FORMATTING">
      <ParameterReferences>
        <ParameterReference order="0"
                            name="search.language"/>
      </ParameterReferences>
      <Text><![CDATA[
CREATE TABLE items (
  item_id   UUID          NOT NULL,
  item_name VARCHAR(1024) NOT NULL,

  -- [jooq ignore start]
  item_name_search TSVECTOR NOT NULL
    GENERATED ALWAYS AS (to_tsvector(%S, item_name)) STORED,
  -- [jooq ignore stop]

  item_deleted BOOLEAN NOT NULL,

  CONSTRAINT items_primary_key
    PRIMARY KEY (item_id)
)
]]></Text>
    </StatementParameterized>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON items TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON items TO cardant_read_only
    </Statement>

    <Comment>
      The item_types table assigns types to items. An item can have zero or more types.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE item_types (
  it_item UUID     NOT NULL,
  it_type INTEGER  NOT NULL,

  CONSTRAINT item_types_primary_key
    PRIMARY KEY (it_item, it_type),

  CONSTRAINT item_types_item_exists
    FOREIGN KEY (it_item) REFERENCES items (item_id),

  CONSTRAINT item_types_record_type_exists
    FOREIGN KEY (it_type) REFERENCES metadata_types (mt_id)
)
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON item_types TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_types TO cardant_read_only
    </Statement>

    <Comment>
      The item_attachments table contains attachments for each item.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE item_attachments (
  ia_file_id   UUID          NOT NULL,
  ia_item_id   UUID          NOT NULL,
  ia_relation  VARCHAR(1024) NOT NULL,

  CONSTRAINT item_attachments_file_exists
    FOREIGN KEY (ia_file_id) REFERENCES files (file_id),

  CONSTRAINT item_attachments_item_exists
    FOREIGN KEY (ia_item_id) REFERENCES items (item_id),

  CONSTRAINT item_attachments_primary_key
    PRIMARY KEY (ia_file_id, ia_item_id, ia_relation),

  CONSTRAINT item_attachments_relation_valid
    CHECK (ia_relation ~ '^([a-z][a-z0-9_-]{0,63})(\.[a-z][a-z0-9_-]{0,62}){0,15}$')
)
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON item_attachments TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_attachments TO cardant_read_only
    </Statement>

    <Comment>
      The item_metadata table contains metadata for each item.
    </Comment>

    <StatementParameterized parameterInterpolation="STRING_FORMATTING">
      <ParameterReferences>
        <ParameterReference order="0"
                            name="search.language"/>
      </ParameterReferences>
      <Text><![CDATA[
CREATE TABLE item_metadata (
  item_meta_item UUID NOT NULL,

  item_meta_type_package  VARCHAR(1024) NOT NULL,
  item_meta_type_record   VARCHAR(1024) NOT NULL,
  item_meta_type_field    VARCHAR(1024) NOT NULL,

  item_meta_value_type           metadata_scalar_base_type_t NOT NULL,
  item_meta_value_integral       BIGINT,
  item_meta_value_text           TEXT,
  -- [jooq ignore start]
  item_meta_value_text_search    TSVECTOR
    GENERATED ALWAYS AS (to_tsvector(%S, item_meta_value_text)) STORED,
  -- [jooq ignore stop]
  item_meta_value_time           TIMESTAMP WITH TIME ZONE,
  item_meta_value_money          NUMERIC(36, 16),
  item_meta_value_money_currency VARCHAR(4),
  item_meta_value_real           DOUBLE PRECISION,

  CONSTRAINT item_metadata_primary_key
    PRIMARY KEY (item_meta_item, item_meta_type_package, item_meta_type_record, item_meta_type_field),

  -- [jooq ignore start]
  CONSTRAINT item_metadata_values_present CHECK (
    CASE
      WHEN item_meta_value_type = 'SCALAR_INTEGRAL' THEN
        (item_meta_value_integral IS NOT NULL)

      WHEN item_meta_value_type = 'SCALAR_TEXT' THEN
        ((item_meta_value_text IS NOT NULL) AND (item_meta_value_text_search IS NOT NULL))

      WHEN item_meta_value_type = 'SCALAR_MONEY' THEN
        ((item_meta_value_money IS NOT NULL) AND (item_meta_value_money_currency IS NOT NULL))

      WHEN item_meta_value_type = 'SCALAR_TIME' THEN
        (item_meta_value_time IS NOT NULL)

      WHEN item_meta_value_type = 'SCALAR_REAL' THEN
        (item_meta_value_real IS NOT NULL)

      ELSE
        'f'::boolean
    END
  ),
  -- [jooq ignore stop]

  CONSTRAINT item_meta_type_package_valid
    CHECK (item_meta_type_package ~ '^([a-z][a-z0-9_-]{0,63})(\.[a-z][a-z0-9_-]{0,62}){0,15}$'),

  CONSTRAINT item_meta_type_record_valid
    CHECK (
      (length (item_meta_type_record) <= 1024) AND (item_meta_type_record ~ '^[a-z][a-z0-9_-]*$')
    ),

  CONSTRAINT item_meta_type_field_valid
    CHECK (
      (length (item_meta_type_field) <= 1024) AND (item_meta_type_field ~ '^[a-z][a-z0-9_-]*$')
    ),

  CONSTRAINT item_metadata_item_exists
    FOREIGN KEY (item_meta_item) REFERENCES items (item_id)
)
]]></Text>
    </StatementParameterized>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON item_metadata TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_metadata TO cardant_read_only
    </Statement>

    <Statement><![CDATA[
CREATE VIEW item_metadata_integral AS
  SELECT
    item_metadata.item_meta_item,
    item_metadata.item_meta_type_package,
    item_metadata.item_meta_type_record,
    item_metadata.item_meta_type_field,
    item_metadata.item_meta_value_type,
    item_metadata.item_meta_value_integral
  FROM
    item_metadata
  WHERE
    item_metadata.item_meta_value_type = 'SCALAR_INTEGRAL'
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON item_metadata_integral TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_metadata_integral TO cardant_read_only
    </Statement>

    <Statement><![CDATA[
CREATE VIEW item_metadata_text AS
  SELECT
    item_metadata.item_meta_item,
    item_metadata.item_meta_type_package,
    item_metadata.item_meta_type_record,
    item_metadata.item_meta_type_field,
    item_metadata.item_meta_value_type,
    item_metadata.item_meta_value_text
  FROM
    item_metadata
  WHERE
    item_metadata.item_meta_value_type = 'SCALAR_TEXT'
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON item_metadata_text TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_metadata_text TO cardant_read_only
    </Statement>

    <Statement><![CDATA[
CREATE VIEW item_metadata_time AS
  SELECT
    item_metadata.item_meta_item,
    item_metadata.item_meta_type_package,
    item_metadata.item_meta_type_record,
    item_metadata.item_meta_type_field,
    item_metadata.item_meta_value_type,
    item_metadata.item_meta_value_time
  FROM
    item_metadata
  WHERE
    item_metadata.item_meta_value_type = 'SCALAR_TIME'
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON item_metadata_time TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_metadata_time TO cardant_read_only
    </Statement>

    <Statement><![CDATA[
CREATE VIEW item_metadata_money AS
  SELECT
    item_metadata.item_meta_item,
    item_metadata.item_meta_type_package,
    item_metadata.item_meta_type_record,
    item_metadata.item_meta_type_field,
    item_metadata.item_meta_value_type,
    item_metadata.item_meta_value_money,
    item_metadata.item_meta_value_money_currency
  FROM
    item_metadata
  WHERE
    item_metadata.item_meta_value_type = 'SCALAR_MONEY'
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON item_metadata_money TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_metadata_money TO cardant_read_only
    </Statement>

    <Statement><![CDATA[
CREATE VIEW item_metadata_real AS
  SELECT
    item_metadata.item_meta_item,
    item_metadata.item_meta_type_package,
    item_metadata.item_meta_type_record,
    item_metadata.item_meta_type_field,
    item_metadata.item_meta_value_type,
    item_metadata.item_meta_value_real
  FROM
    item_metadata
  WHERE
    item_metadata.item_meta_value_type = 'SCALAR_REAL'
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON item_metadata_real TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_metadata_real TO cardant_read_only
    </Statement>

    <Comment>
      The locations table contains storage/deployment locations for each item.
    </Comment>

    <StatementParameterized parameterInterpolation="STRING_FORMATTING">
      <ParameterReferences>
        <ParameterReference order="0"
                            name="search.language"/>
      </ParameterReferences>
      <Text><![CDATA[
CREATE TABLE locations (
  location_id           UUID NOT NULL,
  location_parent       UUID,
  location_name         VARCHAR(128) NOT NULL,

  CONSTRAINT locations_primary_key
    PRIMARY KEY (location_id),

  CONSTRAINT location_parent_exists
    FOREIGN KEY (location_parent) REFERENCES locations (location_id)
)
]]></Text>
    </StatementParameterized>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON locations TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON locations TO cardant_read_only
    </Statement>

    <Comment>
      The location_types table associates locations with types.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE location_types (
  lt_location UUID     NOT NULL,
  lt_type     INTEGER  NOT NULL,

  CONSTRAINT location_types_primary_key
    PRIMARY KEY (lt_location, lt_type),

  CONSTRAINT location_types_location_exists
    FOREIGN KEY (lt_location) REFERENCES locations (location_id),

  CONSTRAINT location_types_declaration_exists
    FOREIGN KEY (lt_type) REFERENCES metadata_types (mt_id)
)
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON location_types TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON location_types TO cardant_read_only
    </Statement>

    <Comment>
      The location_metadata table contains metadata for each location.
    </Comment>

    <StatementParameterized parameterInterpolation="STRING_FORMATTING">
      <ParameterReferences>
        <ParameterReference order="0"
                            name="search.language"/>
      </ParameterReferences>
      <Text><![CDATA[
CREATE TABLE location_metadata (
  location_meta_location  UUID          NOT NULL,

  location_meta_type_package  VARCHAR(1024) NOT NULL,
  location_meta_type_record   VARCHAR(1024) NOT NULL,
  location_meta_type_field    VARCHAR(1024) NOT NULL,

  location_meta_value_type           metadata_scalar_base_type_t NOT NULL,
  location_meta_value_integral       BIGINT,
  location_meta_value_text           TEXT,
  -- [jooq ignore start]
  location_meta_value_text_search    TSVECTOR
    GENERATED ALWAYS AS (to_tsvector(%S, location_meta_value_text)) STORED,
  -- [jooq ignore stop]
  location_meta_value_time           TIMESTAMP WITH TIME ZONE,
  location_meta_value_money          NUMERIC(36, 16),
  location_meta_value_money_currency VARCHAR(4),
  location_meta_value_real           DOUBLE PRECISION,

  CONSTRAINT location_metadata_primary_key
    PRIMARY KEY (location_meta_location, location_meta_type_package, location_meta_type_record, location_meta_type_field),

  -- [jooq ignore start]
  CONSTRAINT location_meta_type_values_present CHECK (
    CASE
      WHEN location_meta_value_type = 'SCALAR_INTEGRAL' THEN
        (location_meta_value_integral IS NOT NULL)
      WHEN location_meta_value_type = 'SCALAR_TEXT' THEN
        (location_meta_value_text IS NOT NULL)
          AND (location_meta_value_text_search IS NOT NULL)
      WHEN location_meta_value_type = 'SCALAR_MONEY' THEN
        (location_meta_value_money IS NOT NULL)
          AND (location_meta_value_money_currency IS NOT NULL)
      WHEN location_meta_value_type = 'SCALAR_TIME' THEN
        (location_meta_value_time IS NOT NULL)
      WHEN location_meta_value_type = 'SCALAR_REAL' THEN
        (location_meta_value_real IS NOT NULL)
      ELSE
        'f'::boolean
    END
  ),
  -- [jooq ignore stop]

  CONSTRAINT location_meta_type_package_valid
    CHECK (location_meta_type_package ~ '^([a-z][a-z0-9_-]{0,63})(\.[a-z][a-z0-9_-]{0,62}){0,15}$'),

  CONSTRAINT location_meta_type_record_valid
    CHECK (
      (length (location_meta_type_record) <= 1024) AND (location_meta_type_record ~ '^[a-z][a-z0-9_-]*$')
    ),

  CONSTRAINT location_meta_type_field_valid
    CHECK (
      (length (location_meta_type_field) <= 1024) AND (location_meta_type_field ~ '^[a-z][a-z0-9_-]*$')
    ),

  CONSTRAINT location_metadata_location_exists
    FOREIGN KEY (location_meta_location) REFERENCES locations (location_id)
)
]]></Text>
    </StatementParameterized>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON location_metadata TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON location_metadata TO cardant_read_only
    </Statement>

    <Comment>
      The location_attachments table contains attachments for each location.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE location_attachments (
  la_file_id     UUID          NOT NULL,
  la_location_id UUID          NOT NULL,
  la_relation    VARCHAR(1024) NOT NULL,

  CONSTRAINT location_attachments_primary_key
    PRIMARY KEY (la_file_id, la_location_id, la_relation),

  CONSTRAINT location_attachments_file_exists
    FOREIGN KEY (la_file_id) REFERENCES files (file_id),

  CONSTRAINT location_attachments_location_exists
    FOREIGN KEY (la_location_id) REFERENCES locations (location_id),

  CONSTRAINT location_attachments_relation_valid
    CHECK (la_relation ~ '^([a-z][a-z0-9_-]{0,63})(\.[a-z][a-z0-9_-]{0,62}){0,15}$')
)
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON location_attachments TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON location_attachments TO cardant_read_only
    </Statement>

    <Comment>
      The item_locations table associates items with locations. There are two types of associations: set associations
      and serial associations. A set association associates a non-zero count of items with a location. The items within
      the set have no distinguishable identities. A serial association associates exactly one item with a location, and
      includes a serial number that uniquely identifies the item. Below this table, some indexes are used to disallow
      having multiple set associations for the same item and location.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE item_locations (
  item_location_item    UUID           NOT NULL,
  item_location         UUID           NOT NULL,
  item_location_count   BIGINT         NOT NULL,
  item_location_serial  VARCHAR(1024),

  -- [jooq ignore start]
  CONSTRAINT item_locations_assertion_type_values_present CHECK (
    CASE
      WHEN item_location_serial IS NOT NULL THEN
        item_location_count = 1
      ELSE
        't'::boolean
    END
  ),

  CONSTRAINT item_locations_unique
    UNIQUE NULLS NOT DISTINCT (item_location_item, item_location, item_location_serial),
  -- [jooq ignore stop]

  CONSTRAINT item_id_exists
    FOREIGN KEY (item_location_item) REFERENCES items (item_id),

  CONSTRAINT item_location_exists
    FOREIGN KEY (item_location) REFERENCES locations (location_id),

  CONSTRAINT check_item_location_count
    CHECK (item_location_count >= 0)
)
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON item_locations TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_locations TO cardant_read_only
    </Statement>

    <Statement><![CDATA[
CREATE VIEW item_locations_summed (item_id, item_count) AS
  SELECT
    item_locations.item_location_item,
    SUM (item_locations.item_location_count)
  FROM item_locations
  GROUP BY item_locations.item_location_item
]]></Statement>

    <Statement>
      GRANT SELECT ON item_locations_summed TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_locations_summed TO cardant_read_only
    </Statement>

    <Comment>
      The location_descendants function returns the descendants of a given location. The location itself is included in
      the results.
    </Comment>

    <Statement><![CDATA[
CREATE FUNCTION location_descendants (X UUID)
  RETURNS TABLE (LOCATION UUID)
  LANGUAGE SQL
  AS
$$
WITH RECURSIVE location_tree AS (
  SELECT
    locations.location_parent,
    locations.location_id
  FROM locations
  WHERE
    locations.location_parent = X
  UNION
    SELECT
      L.location_parent,
      L.location_id
    FROM locations L
    JOIN location_tree
      ON location_tree.location_id = L.location_parent
)
SELECT
  location_id
FROM location_tree
UNION
  SELECT Q.location_id
    FROM locations Q
    WHERE Q.location_id = X
$$
]]></Statement>

    <Comment>
      The location_descendants function returns the descendants of a given location. The location itself is not included
      in the results.
    </Comment>

    <Statement><![CDATA[
CREATE FUNCTION location_descendants_strict (X UUID)
  RETURNS TABLE (LOCATION UUID)
  LANGUAGE SQL
  AS
$$
WITH RECURSIVE location_tree AS (
  SELECT
    locations.location_parent,
    locations.location_id
  FROM locations
  WHERE
    locations.location_parent = X
  UNION
    SELECT
      L.location_parent,
      L.location_id
    FROM locations L
    JOIN location_tree
      ON location_tree.location_id = L.location_parent
)
SELECT location_id FROM location_tree
$$
]]></Statement>

    <Comment>
      The location_is_descendant_of function returns true if x is a descendant of y in terms of the locations table.
    </Comment>

    <Statement><![CDATA[
CREATE FUNCTION location_is_descendant_of(
  X UUID,
  Y UUID
) RETURNS BOOL
  LANGUAGE PLPGSQL
  AS $$
BEGIN
  IF X = Y THEN
    RETURN TRUE;
  END IF;

  DECLARE
    YP UUID;
  BEGIN
    SELECT location_parent INTO YP FROM locations WHERE location_id = Y;
    RETURN location_is_descendant_of (X, YP);
  END;
END
$$
]]></Statement>

    <Comment>
      A view for performing item searches.
    </Comment>

    <Statement><![CDATA[
CREATE VIEW item_search_view AS
  SELECT
    items.item_id,
    items.item_name,
    -- [jooq ignore start]
    items.item_name_search,
    -- [jooq ignore stop]
    items.item_deleted,
    item_metadata.item_meta_type_package,
    item_metadata.item_meta_type_record,
    item_metadata.item_meta_type_field,
    item_metadata.item_meta_value_type,
    item_metadata.item_meta_value_integral,
    item_metadata.item_meta_value_text,
    item_metadata.item_meta_value_time,
    item_metadata.item_meta_value_money,
    item_metadata.item_meta_value_money_currency,
    item_metadata.item_meta_value_real,
    array_agg(metadata_types.mt_id)                AS isv_metadata_type_ids,
    array_agg(item_locations.item_location)        AS isv_item_locations,
    array_agg(item_locations.item_location_serial) AS isv_item_serials
  FROM
    items
  LEFT JOIN item_types
    ON item_types.it_item = items.item_id
  LEFT JOIN item_metadata
    ON item_metadata.item_meta_item = items.item_id
  LEFT JOIN metadata_types
    ON metadata_types.mt_id = item_types.it_type
  LEFT JOIN metadata_type_packages
    ON metadata_type_packages.mtp_id = metadata_types.mt_package
  LEFT JOIN item_locations
    ON item_locations.item_location_item = items.item_id
  GROUP BY
    items.item_id,
    items.item_name,
    -- [jooq ignore start]
    items.item_name_search,
    -- [jooq ignore stop]
    items.item_deleted,
    item_metadata.item_meta_type_package,
    item_metadata.item_meta_type_record,
    item_metadata.item_meta_type_field,
    item_metadata.item_meta_value_type,
    item_metadata.item_meta_value_integral,
    item_metadata.item_meta_value_text,
    item_metadata.item_meta_value_time,
    item_metadata.item_meta_value_money,
    item_metadata.item_meta_value_money_currency,
    item_metadata.item_meta_value_real
]]></Statement>

    <Statement>
      GRANT SELECT ON item_search_view TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON item_search_view TO cardant_read_only
    </Statement>

    <Comment>
      A view for performing location searches.
    </Comment>

    <Statement><![CDATA[
CREATE VIEW location_search_view AS
  SELECT
    locations.location_id,
    locations.location_name,
    location_metadata.location_meta_type_package,
    location_metadata.location_meta_type_record,
    location_metadata.location_meta_type_field,
    location_metadata.location_meta_value_type,
    location_metadata.location_meta_value_integral,
    location_metadata.location_meta_value_text,
    location_metadata.location_meta_value_time,
    location_metadata.location_meta_value_money,
    location_metadata.location_meta_value_money_currency,
    location_metadata.location_meta_value_real,
    array_agg(metadata_types.mt_name) AS mt_names
  FROM
    locations
  LEFT JOIN location_types
    ON location_types.lt_location = locations.location_id
  LEFT JOIN location_metadata
    ON location_metadata.location_meta_location = locations.location_id
  LEFT JOIN metadata_types
    ON metadata_types.mt_id = location_types.lt_type
  GROUP BY
    locations.location_id,
    locations.location_name,
    location_metadata.location_meta_type_package,
    location_metadata.location_meta_type_record,
    location_metadata.location_meta_type_field,
    location_metadata.location_meta_value_type,
    location_metadata.location_meta_value_integral,
    location_metadata.location_meta_value_text,
    location_metadata.location_meta_value_time,
    location_metadata.location_meta_value_money,
    location_metadata.location_meta_value_money_currency,
    location_metadata.location_meta_value_real
]]></Statement>

    <Statement>
      GRANT SELECT ON location_search_view TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON location_search_view TO cardant_read_only
    </Statement>

    <Comment>
      The audit table stores a list of auditable events. Who did it? What did they do? When did they do it?
    </Comment>

    <Statement><![CDATA[
CREATE TABLE audit (
  id         BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY,
  user_id    UUID                     NOT NULL,
  time       TIMESTAMP WITH TIME ZONE NOT NULL,
  type       TEXT                     NOT NULL,

  -- [jooq ignore start]
  data       HSTORE                   NOT NULL,
  -- [jooq ignore stop]

  CONSTRAINT audit_primary_key
    PRIMARY KEY (id)
)
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT ON audit TO cardant
    </Statement>
    <Statement>
      GRANT SELECT ON audit TO cardant_read_only
    </Statement>
  </Schema>
</Schemas>
